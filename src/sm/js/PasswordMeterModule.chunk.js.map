{"version":3,"sources":["webpack:///PasswordMeterModule.chunk.js","webpack:///./js/modules/Base.module.js?da84**********","webpack:///./js/forms/v2/modules/passwordMeter/PasswordMeter.module.js","webpack:///./js/forms/v2/modules/passwordMeter/controller/PasswordMeter.controller.js"],"names":["webpackJsonp","22","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_classCallCheck2","_classCallCheck3","BaseModule","moduleConfig","this","node","config","identifier","prototype","init","getIdentifier","631","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","_Base","_Base2","_PasswordMeter","_PasswordMeter2","PasswordMeterModule","_BaseModule","call","controllerInstance","passwordMeter","633","updateDOM","_this","_fasterdom2","mutateInstant","cls","validationLevelTypes","join","$levelBar","removeClass","addClass","getValidationLevel","$strengthLabel","text","$invalid","filter","$valid","pw","$wrapperPW","$scope","isValid","error","$wrapperPWConfirm","pwConfirm","isConfirmed","validatePW","force","_this2","_jquery2","level","length","_loop","i","_keys2","conditions","forEach","key","val","regx","regex","el","$el","exec","add","is","handleBlur","_this3","measureInstant","$inputPW","$inputPWConfirm","handleInput","_this4","addHandler","on","bind","setupConditions","_this5","map","type","find","each","attr","hasOwnProperty","push","setupRegex","_this6","username","$inputUser","_assign2","hasUserName","RegExp","_createClass2","_createClass3","_assign","_keys","_AbstractController2","_AbstractController3","_fasterdom","_jquery","hasNumber","hasUpperLower","hasSpecialChar","hasMinLength","PasswordMeterController","_AbstractController","_this7","$root","closest","get"],"mappings":"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","file":"PasswordMeterModule.chunk.js","sourcesContent":["/*!\n * frontend\n * name: innogy-web,\n * buildDate: Tue Jul 11 2017 11:09:41 GMT+0200 (CEST),\n * packageVersion: 2.0.0\n */\n\nwebpackJsonp([13],{\n\n/***/ 22:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\t\n\tvar _classCallCheck2 = __webpack_require__(1);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/**\n\t * Basic module class definition providing basic interface functions\n\t */\n\t\n\tvar BaseModule = function () {\n\t\n\t\t/**\n\t  * Initialize a module with a config provided by the AppConmoduleConfig\n\t  * @param {moduleConfig} moduleConfig - Config parsed from teh DOM\n\t  */\n\t\n\t\tfunction BaseModule(moduleConfig) {\n\t\t\t(0, _classCallCheck3.default)(this, BaseModule);\n\t\n\t\n\t\t\t/**\n\t   *\n\t   * @type {Object}\n\t   */\n\t\t\tthis.node = moduleConfig.node;\n\t\t\t/**\n\t   *\n\t   * @type {Object}\n\t   */\n\t\t\tthis.config = moduleConfig.config;\n\t\t\t/**\n\t   *\n\t   * @type {string}\n\t   */\n\t\t\tthis.identifier = moduleConfig.identifier;\n\t\t}\n\t\n\t\tBaseModule.prototype.init = function init() {\n\t\t\treturn this;\n\t\t};\n\t\n\t\t/**\n\t  * @return {string} returns the identifier for the module instance\n\t  */\n\t\n\t\n\t\tBaseModule.prototype.getIdentifier = function getIdentifier() {\n\t\t\treturn this.identifier;\n\t\t};\n\t\n\t\treturn BaseModule;\n\t}();\n\t\n\texports.default = BaseModule;\n\n/***/ }),\n\n/***/ 631:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\t\n\tvar _classCallCheck2 = __webpack_require__(1);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(3);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(2);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _Base = __webpack_require__(22);\n\t\n\tvar _Base2 = _interopRequireDefault(_Base);\n\t\n\tvar _PasswordMeter = __webpack_require__(633);\n\t\n\tvar _PasswordMeter2 = _interopRequireDefault(_PasswordMeter);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/**\r\n\t * @extends {BaseModule}\r\n\t */\n\t\n\tvar PasswordMeterModule = function (_BaseModule) {\n\t\t(0, _inherits3.default)(PasswordMeterModule, _BaseModule);\n\t\n\t\tfunction PasswordMeterModule(config) {\n\t\t\t(0, _classCallCheck3.default)(this, PasswordMeterModule);\n\t\t\treturn (0, _possibleConstructorReturn3.default)(this, _BaseModule.call(this, config));\n\t\t}\n\t\n\t\tPasswordMeterModule.prototype.init = function init() {\n\t\t\t_BaseModule.prototype.init.call(this);\n\t\n\t\t\tvar controllerInstance = new _PasswordMeter2.default();\n\t\n\t\t\tthis.passwordMeter = controllerInstance.init(this.node);\n\t\t};\n\t\n\t\treturn PasswordMeterModule;\n\t}(_Base2.default);\n\t\n\texports.default = PasswordMeterModule;\n\n/***/ }),\n\n/***/ 633:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\t\n\tvar _classCallCheck2 = __webpack_require__(1);\n\t\n\tvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\t\n\tvar _createClass2 = __webpack_require__(30);\n\t\n\tvar _createClass3 = _interopRequireDefault(_createClass2);\n\t\n\tvar _possibleConstructorReturn2 = __webpack_require__(3);\n\t\n\tvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\t\n\tvar _inherits2 = __webpack_require__(2);\n\t\n\tvar _inherits3 = _interopRequireDefault(_inherits2);\n\t\n\tvar _assign = __webpack_require__(35);\n\t\n\tvar _assign2 = _interopRequireDefault(_assign);\n\t\n\tvar _keys = __webpack_require__(43);\n\t\n\tvar _keys2 = _interopRequireDefault(_keys);\n\t\n\tvar _AbstractController2 = __webpack_require__(9);\n\t\n\tvar _AbstractController3 = _interopRequireDefault(_AbstractController2);\n\t\n\tvar _fasterdom = __webpack_require__(5);\n\t\n\tvar _fasterdom2 = _interopRequireDefault(_fasterdom);\n\t\n\tvar _jquery = __webpack_require__(6);\n\t\n\tvar _jquery2 = _interopRequireDefault(_jquery);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t//require('ie9-oninput-polyfill')\n\t\n\t/**\n\t * Default RegExp definitions\n\t * info: hasUserName will be set on init, cause actual username isn't available yet\n\t */\n\tvar regex = {\n\t\thasNumber: /\\d/,\n\t\thasUpperLower: /^(?=.*([a-z]))(?=.*([A-Z])).+$/,\n\t\thasSpecialChar: /^(?=.*([_!@%#.,:;\"'&*()+\\-?$\\/\\\\])).+$/,\n\t\thasMinLength: /^.{8,}$/,\n\t\thasUserName: ''\n\t};\n\t\n\t/**\n\t * Validation level mapping\n\t * - levels must ascend in strength ( e.g. 0 = invalid, ... last_N = strongest )\n\t */\n\tvar validationLevelTypes = [// eslint-disable-line one-var\n\t'invalid', 'medium', 'strong'];\n\t\n\t/**\n\t * Update password meter component\n\t * - set/unset validation errors\n\t * - set validation level bar\n\t * - show/hide error messages\n\t * @return {void}\n\t */\n\tfunction updateDOM() {\n\t\tvar _this = this;\n\t\n\t\t_fasterdom2.default.mutateInstant(function () {\n\t\t\tvar cls = 'strength-bar--' + validationLevelTypes.join(' strength-bar--');\n\t\n\t\t\t// update level bar\n\t\t\t_this.$levelBar.removeClass(cls).addClass('strength-bar--' + _this.getValidationLevel());\n\t\n\t\t\t_this.$strengthLabel.text(_this.getValidationLevel());\n\t\n\t\t\t// update list items\n\t\t\t_this.$invalid.filter('.valid').removeClass('valid').filter('[required]').addClass('invalid');\n\t\n\t\t\t_this.$valid.removeClass('invalid').addClass('valid');\n\t\n\t\t\t// remove error class if password is set\n\t\t\tif (!!_this.pw) {\n\t\t\t\t_this.$wrapperPW.removeClass('error');\n\t\t\t}\n\t\n\t\t\t// update password meter component\n\t\t\t_this.$scope.removeClass('password-meter--invalid');\n\t\n\t\t\tif (!_this.isValid && _this.error) {\n\t\t\t\t_this.$scope.addClass('password-meter--invalid');\n\t\t\t}\n\t\n\t\t\t// update password comfirm error\n\t\t\t_this.$wrapperPWConfirm.removeClass('error');\n\t\n\t\t\tif (!!_this.pwConfirm && !_this.isConfirmed && _this.isValid && !_this.error) {\n\t\t\t\t_this.$wrapperPWConfirm.addClass('error');\n\t\t\t}\n\t\t});\n\t}\n\t\n\t/**\n\t * Validate entered password\n\t * - check validation strength\n\t * - update validation level\n\t * - update valid and invalid collection\n\t * @param {boolean} force - validate even password is empty string\n\t * @return {void}\n\t */\n\tfunction validatePW(force) {\n\t\tvar _this2 = this;\n\t\n\t\tthis.error = false;\n\t\tthis.$valid = (0, _jquery2.default)([]);\n\t\tthis.$invalid = (0, _jquery2.default)([]);\n\t\tthis.level = validationLevelTypes.length - 1;\n\t\n\t\tvar _loop = function _loop(i) {\n\t\n\t\t\t(0, _keys2.default)(_this2.conditions[i]).forEach(function (key) {\n\t\t\t\tvar val = _this2.conditions[i][key],\n\t\t\t\t    regx = _this2.regex[key];\n\t\n\t\t\t\tval.forEach(function (el) {\n\t\t\t\t\tvar $el = (0, _jquery2.default)(el);\n\t\n\t\t\t\t\tif ((force || _this2.pw) && !!regx && regx.exec(_this2.pw) !== null) {\n\t\t\t\t\t\t_this2.$valid = _this2.$valid.add($el);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_this2.level = i - 1;\n\t\t\t\t\t\t_this2.$invalid = _this2.$invalid.add($el);\n\t\n\t\t\t\t\t\tif (force) {\n\t\t\t\t\t\t\t$el.addClass('valid');\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif ($el.is('.valid[required]') || $el.is('.invalid[required]')) {\n\t\t\t\t\t\t\t_this2.error = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\t\n\t\tfor (var i = this.level; i > 0; i--) {\n\t\t\t_loop(i);\n\t\t}\n\t}\n\t\n\t/**\n\t * Handles password input blur events\n\t * - updates password and password confirm values\n\t * - updates dom\n\t * @return {void}\n\t */\n\tfunction handleBlur() {\n\t\tvar _this3 = this;\n\t\n\t\t_fasterdom2.default.measureInstant(function () {\n\t\t\t_this3.pw = _this3.$inputPW.val();\n\t\t\t_this3.pwConfirm = _this3.$inputPWConfirm.val();\n\t\t\t_this3.isConfirmed = !!_this3.pw && !!_this3.pwConfirm && _this3.pw === _this3.pwConfirm;\n\t\t});\n\t\n\t\tupdateDOM.call(this);\n\t}\n\t\n\t/**\n\t * Handles password input change events\n\t * - updates password and runs it's validation\n\t * - updates dom\n\t * @param {boolean} force - validate even password is empty string\n\t * @return {void}\n\t */\n\tfunction handleInput(force) {\n\t\tvar _this4 = this;\n\t\n\t\t_fasterdom2.default.measureInstant(function () {\n\t\t\t_this4.pw = _this4.$inputPW.val();\n\t\n\t\t\tvalidatePW.call(_this4, force);\n\t\t});\n\t\n\t\tupdateDOM.call(this);\n\t}\n\t\n\t/**\n\t * Adds event listeners on password input elements\n\t * @return {void}\n\t */\n\tfunction addHandler() {\n\t\tthis.$inputPW.on('input', handleInput.bind(this, false));\n\t\tthis.$inputPW.on('change', handleBlur.bind(this));\n\t\n\t\tthis.$inputPWConfirm.on('blur', handleInput.bind(this, true));\n\t\tthis.$inputPWConfirm.on('change', handleBlur.bind(this));\n\t}\n\t\n\t/**\n\t * Sets up validation conditions from list items data attributes\n\t * - creates array with conditions based on validation leves\n\t * @return {void}\n\t */\n\tfunction setupConditions() {\n\t\tvar _this5 = this;\n\t\n\t\t_fasterdom2.default.measureInstant(function () {\n\t\t\t_this5.conditions = validationLevelTypes.map(function (type) {\n\t\t\t\tvar obj = {};\n\t\n\t\t\t\t_this5.$scope.find('.password-meter--' + type + ' li[data-validate]').each(function (i, el) {\n\t\t\t\t\tvar $el = (0, _jquery2.default)(el),\n\t\t\t\t\t    regx = $el.attr('data-validate');\n\t\n\t\t\t\t\tif (!obj.hasOwnProperty(regx)) {\n\t\t\t\t\t\tobj[regx] = [];\n\t\t\t\t\t}\n\t\n\t\t\t\t\tobj[regx].push($el);\n\t\t\t\t});\n\t\n\t\t\t\treturn obj;\n\t\t\t});\n\t\t});\n\t}\n\t\n\t/**\n\t * Setup regular expressions for validation\n\t * @return {void}\n\t */\n\tfunction setupRegex() {\n\t\tvar _this6 = this;\n\t\n\t\t_fasterdom2.default.measureInstant(function () {\n\t\t\tvar username = _this6.$inputUser ? _this6.$inputUser.val() : '';\n\t\n\t\t\t_this6.regex = (0, _assign2.default)({}, regex);\n\t\t\t_this6.regex.hasUserName = new RegExp('^(?!=($))(?!.*' + username + ').+$', 'i');\n\t\t});\n\t}\n\t\n\t/**\n\t * Class representing a password meter instance.\n\t * Controls the state of the password meter conditions.\n\t * Controls password meter behavior.\n\t * @extends { AbstractController }\n\t */\n\t\n\tvar PasswordMeterController = function (_AbstractController) {\n\t\t(0, _inherits3.default)(PasswordMeterController, _AbstractController);\n\t\n\t\tfunction PasswordMeterController() {\n\t\t\t(0, _classCallCheck3.default)(this, PasswordMeterController);\n\t\n\t\t\tvar _this7 = (0, _possibleConstructorReturn3.default)(this, _AbstractController.call(this));\n\t\n\t\t\t_this7.$scope = null;\n\t\t\treturn _this7;\n\t\t}\n\t\n\t\t/**\n\t  * Initialises the controller.\n\t  * Has to be called after ready event.\n\t  *\n\t  * @param { object } $root - jQuery wrapped DOM node\n\t  * @returns { void }\n\t  * @public\n\t  */\n\t\n\t\n\t\tPasswordMeterController.prototype.init = function init($root) {\n\t\n\t\t\tthis.$scope = $root;\n\t\t\tthis.$levelBar = $root.find('.strength-bar');\n\t\t\tthis.$strengthLabel = this.$levelBar.find('.strength-bar__label');\n\t\t\tthis.$inputUser = $root.find('input[name=\"user\"]');\n\t\t\tthis.$inputPW = $root.find('input[name=\"password\"]');\n\t\t\tthis.$inputPWConfirm = $root.find('input[name=\"password-confirm\"]');\n\t\t\tthis.$wrapperPW = this.$inputPW.closest('.field-group');\n\t\t\tthis.$wrapperPWConfirm = this.$inputPWConfirm.closest('.field-group');\n\t\t\tthis.pw = null;\n\t\t\tthis.pwConfirm = null;\n\t\n\t\t\t// available validation levels (see validationLevelTypes): {index} => {type name};\n\t\t\tthis.level = 0;\n\t\t\tthis.conditions = [];\n\t\t\tthis.$valid = [];\n\t\t\tthis.$invalid = [];\n\t\t\tthis.isConfirmed = false;\n\t\n\t\t\tsetupConditions.call(this);\n\t\t\tsetupRegex.call(this);\n\t\t\taddHandler.call(this);\n\t\t};\n\t\n\t\t/**\n\t  * Get type name of current validation level\n\t  * @return {string} - type name\n\t  */\n\t\n\t\tPasswordMeterController.prototype.getValidationLevel = function getValidationLevel() {\n\t\t\treturn validationLevelTypes[this.level];\n\t\t};\n\t\n\t\t(0, _createClass3.default)(PasswordMeterController, [{\n\t\t\tkey: 'isValid',\n\t\t\tget: function get() {\n\t\t\t\treturn this.level > 0;\n\t\t\t}\n\t\t}]);\n\t\treturn PasswordMeterController;\n\t}(_AbstractController3.default);\n\t\n\t/**\n\t * @public\n\t * @return {PasswordMeterController} PasswordMeterController class\n\t */\n\t\n\t\n\texports.default = PasswordMeterController;\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// PasswordMeterModule.chunk.js","/**\n * Basic module class definition providing basic interface functions\n */\nclass BaseModule {\n\n\t/**\n\t * Initialize a module with a config provided by the AppConmoduleConfig\n\t * @param {moduleConfig} moduleConfig - Config parsed from teh DOM\n\t */\n\tconstructor ( moduleConfig ) {\n\n\t\t/**\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.node       = moduleConfig.node;\n\t\t/**\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.config     = moduleConfig.config;\n\t\t/**\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tthis.identifier = moduleConfig.identifier;\n\t}\n\n\tinit () {\n\t\treturn this;\n\t}\n\n\t/**\n\t * @return {string} returns the identifier for the module instance\n\t */\n\tgetIdentifier () {\n\t\treturn this.identifier;\n\t}\n}\n\nexport default BaseModule;\n\n\n\n// WEBPACK FOOTER //\n// ./js/modules/Base.module.js","import BaseModule from './../../../../modules/Base.module';\r\nimport PasswordMeterController from './controller/PasswordMeter.controller';\r\n\r\n/**\r\n * @extends {BaseModule}\r\n */\r\nclass PasswordMeterModule extends BaseModule {\r\n\r\n\tconstructor ( config ) {\r\n\r\n\t\tsuper( config );\r\n\t}\r\n\r\n\tinit () {\r\n\t\tsuper.init();\r\n\r\n\t\tconst controllerInstance = new PasswordMeterController();\r\n\r\n\t\tthis.passwordMeter = controllerInstance.init( this.node );\r\n\t}\r\n}\r\n\r\nexport default PasswordMeterModule;\r\n\n\n\n// WEBPACK FOOTER //\n// ./js/forms/v2/modules/passwordMeter/PasswordMeter.module.js","import AbstractController from '../../../../../base/controller/Abstract.controller.js';\nimport dom from 'fasterdom';\nimport $ from 'jquery';\n//require('ie9-oninput-polyfill')\n\n/**\n * Default RegExp definitions\n * info: hasUserName will be set on init, cause actual username isn't available yet\n */\nconst regex = {\n\thasNumber :      /\\d/,\n\thasUpperLower :  /^(?=.*([a-z]))(?=.*([A-Z])).+$/,\n\thasSpecialChar : /^(?=.*([_!@%#.,:;\"'&*()+\\-?$\\/\\\\])).+$/,\n\thasMinLength :   /^.{8,}$/,\n\thasUserName :    ''\n};\n\n/**\n * Validation level mapping\n * - levels must ascend in strength ( e.g. 0 = invalid, ... last_N = strongest )\n */\nconst validationLevelTypes = [ // eslint-disable-line one-var\n\t'invalid',\n\t'medium',\n\t'strong'\n];\n\n/**\n * Update password meter component\n * - set/unset validation errors\n * - set validation level bar\n * - show/hide error messages\n * @return {void}\n */\nfunction updateDOM () {\n\tdom.mutateInstant( () => {\n\t\tconst cls = `strength-bar--${validationLevelTypes.join( ' strength-bar--' )}`;\n\n\t\t// update level bar\n\t\tthis.$levelBar\n\t\t\t\t.removeClass( cls )\n\t\t\t\t.addClass( `strength-bar--${this.getValidationLevel()}` );\n\n\t\tthis.$strengthLabel.text( this.getValidationLevel() );\n\n\t\t// update list items\n\t\tthis.$invalid\n\t\t\t\t.filter( '.valid' ).removeClass( 'valid' )\n\t\t\t\t.filter( '[required]' ).addClass( 'invalid' );\n\n\t\tthis.$valid\n\t\t\t\t.removeClass( 'invalid' )\n\t\t\t\t.addClass( 'valid' );\n\n\t\t// remove error class if password is set\n\t\tif ( !!this.pw ) {\n\t\t\tthis.$wrapperPW.removeClass( 'error' );\n\t\t}\n\n\t\t// update password meter component\n\t\tthis.$scope.removeClass( 'password-meter--invalid' );\n\n\t\tif ( !this.isValid && this.error ) {\n\t\t\tthis.$scope.addClass( 'password-meter--invalid' );\n\t\t}\n\n\t\t// update password comfirm error\n\t\tthis.$wrapperPWConfirm.removeClass( 'error' );\n\n\t\tif ( !!this.pwConfirm && !this.isConfirmed && this.isValid && !this.error ) {\n\t\t\tthis.$wrapperPWConfirm.addClass( 'error' );\n\t\t}\n\t} );\n}\n\n/**\n * Validate entered password\n * - check validation strength\n * - update validation level\n * - update valid and invalid collection\n * @param {boolean} force - validate even password is empty string\n * @return {void}\n */\nfunction validatePW ( force ) {\n\n\tthis.error    = false;\n\tthis.$valid   = $( [] );\n\tthis.$invalid = $( [] );\n\tthis.level    = validationLevelTypes.length - 1;\n\n\tfor ( let i = this.level; i > 0; i-- ) {\n\n\t\tObject.keys( this.conditions[ i ] ).forEach( ( key ) => {\n\t\t\tconst val  = this.conditions[ i ][ key ],\n\t\t\t      regx = this.regex[ key ];\n\n\t\t\tval.forEach( ( el ) => {\n\t\t\t\tconst $el = $( el );\n\n\t\t\t\tif ( ( force || this.pw ) && !!regx && regx.exec( this.pw ) !== null ) {\n\t\t\t\t\tthis.$valid = this.$valid.add( $el );\n\t\t\t\t} else {\n\t\t\t\t\tthis.level    = i - 1;\n\t\t\t\t\tthis.$invalid = this.$invalid.add( $el );\n\n\t\t\t\t\tif ( force ) {\n\t\t\t\t\t\t$el.addClass( 'valid' );\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( $el.is( '.valid[required]' ) || $el.is( '.invalid[required]' ) ) {\n\t\t\t\t\t\tthis.error = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n}\n\n/**\n * Handles password input blur events\n * - updates password and password confirm values\n * - updates dom\n * @return {void}\n */\nfunction handleBlur () {\n\tdom.measureInstant( () => {\n\t\tthis.pw          = this.$inputPW.val();\n\t\tthis.pwConfirm   = this.$inputPWConfirm.val();\n\t\tthis.isConfirmed = !!this.pw && !!this.pwConfirm && this.pw === this.pwConfirm;\n\t} );\n\n\tupdateDOM.call( this );\n}\n\n/**\n * Handles password input change events\n * - updates password and runs it's validation\n * - updates dom\n * @param {boolean} force - validate even password is empty string\n * @return {void}\n */\nfunction handleInput ( force ) {\n\tdom.measureInstant( () => {\n\t\tthis.pw = this.$inputPW.val();\n\n\t\tvalidatePW.call( this, force );\n\t} );\n\n\tupdateDOM.call( this );\n}\n\n/**\n * Adds event listeners on password input elements\n * @return {void}\n */\nfunction addHandler () {\n\tthis.$inputPW.on( 'input', handleInput.bind( this, false ) );\n\tthis.$inputPW.on( 'change', handleBlur.bind( this ) );\n\n\tthis.$inputPWConfirm.on( 'blur', handleInput.bind( this, true ) );\n\tthis.$inputPWConfirm.on( 'change', handleBlur.bind( this ) );\n}\n\n/**\n * Sets up validation conditions from list items data attributes\n * - creates array with conditions based on validation leves\n * @return {void}\n */\nfunction setupConditions () {\n\tdom.measureInstant( () => {\n\t\tthis.conditions = validationLevelTypes.map( ( type ) => {\n\t\t\tconst obj = {};\n\n\t\t\tthis.$scope.find( `.password-meter--${type} li[data-validate]` ).each( ( i, el ) => {\n\t\t\t\tconst $el  = $( el ),\n\t\t\t\t      regx = $el.attr( 'data-validate' );\n\n\t\t\t\tif ( !obj.hasOwnProperty( regx ) ) {\n\t\t\t\t\tobj[ regx ] = [];\n\t\t\t\t}\n\n\t\t\t\tobj[ regx ].push( $el );\n\t\t\t} );\n\n\t\t\treturn obj;\n\t\t} );\n\t} );\n}\n\n/**\n * Setup regular expressions for validation\n * @return {void}\n */\nfunction setupRegex () {\n\tdom.measureInstant( () => {\n\t\tconst username = this.$inputUser ?\n\t\t                 this.$inputUser.val() :\n\t\t                 '';\n\n\t\tthis.regex             = Object.assign( {}, regex );\n\t\tthis.regex.hasUserName = new RegExp( `^(?!=($))(?!.*${username}).+$`, 'i' );\n\t} );\n}\n\n/**\n * Class representing a password meter instance.\n * Controls the state of the password meter conditions.\n * Controls password meter behavior.\n * @extends { AbstractController }\n */\nclass PasswordMeterController extends AbstractController {\n\n\tconstructor () {\n\t\tsuper();\n\n\t\tthis.$scope = null;\n\t}\n\n\t/**\n\t * Initialises the controller.\n\t * Has to be called after ready event.\n\t *\n\t * @param { object } $root - jQuery wrapped DOM node\n\t * @returns { void }\n\t * @public\n\t */\n\tinit ( $root ) {\n\n\t\tthis.$scope            = $root;\n\t\tthis.$levelBar         = $root.find( '.strength-bar' );\n\t\tthis.$strengthLabel    = this.$levelBar.find('.strength-bar__label');\n\t\tthis.$inputUser        = $root.find( 'input[name=\"user\"]' );\n\t\tthis.$inputPW          = $root.find( 'input[name=\"password\"]' );\n\t\tthis.$inputPWConfirm   = $root.find( 'input[name=\"password-confirm\"]' );\n\t\tthis.$wrapperPW        = this.$inputPW.closest( '.field-group' );\n\t\tthis.$wrapperPWConfirm = this.$inputPWConfirm.closest( '.field-group' );\n\t\tthis.pw                = null;\n\t\tthis.pwConfirm         = null;\n\n\t\t// available validation levels (see validationLevelTypes): {index} => {type name};\n\t\tthis.level       = 0;\n\t\tthis.conditions  = [];\n\t\tthis.$valid      = [];\n\t\tthis.$invalid    = [];\n\t\tthis.isConfirmed = false;\n\n\t\tsetupConditions.call( this );\n\t\tsetupRegex.call( this );\n\t\taddHandler.call( this );\n\t}\n\n\tget isValid () {\n\t\treturn this.level > 0;\n\t}\n\n\t/**\n\t * Get type name of current validation level\n\t * @return {string} - type name\n\t */\n\tgetValidationLevel () {\n\t\treturn validationLevelTypes[ this.level ];\n\t}\n\n}\n\n/**\n * @public\n * @return {PasswordMeterController} PasswordMeterController class\n */\nexport default PasswordMeterController;\n\n\n\n// WEBPACK FOOTER //\n// ./js/forms/v2/modules/passwordMeter/controller/PasswordMeter.controller.js"],"sourceRoot":""}